// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PaymentMethod {
  id                     String                   @id @default(uuid())
  name                   String                   @unique
  code                   Int                      @unique
  createdAt              DateTime                 @default(now())
  deletedAt              DateTime?
  updatedAt              DateTime                 @updatedAt
  orders                 Orders[]
  paymentMethodOnProduct PaymentMethodOnProduct[]
}

model PixKey {
  id                     String               @id @default(uuid())
  key                    String
  paymentConfigurationId String               @unique
  paymentConfiguration   PaymentConfiguration @relation(fields: [paymentConfigurationId], references: [id])
  createdAt              DateTime             @default(now())
  deletedAt              DateTime?
  updatedAt              DateTime             @updatedAt
}

model PaymentConfiguration {
  id         String   @id @default(uuid())
  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id])
  PixKey     PixKey?
}

model User {
  id         String     @id @default(uuid())
  name       String
  cpf        String?    @unique
  cnpj       String?    @unique
  email      String     @unique
  password   String
  address    Address?
  role       Role       @default(USER)
  business   Business[]
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime   @updatedAt
}

model Business {
  id                     String                  @id @default(uuid())
  comercialSite          String
  description            String
  extractDescription     String
  balance                Float                   @default(0)
  departmentId           String
  department             Department              @relation(fields: [departmentId], references: [id])
  paymentConfiguration   PaymentConfiguration?
  apiKey                 ApiKey?
  products               Product[]
  orders                 Orders[]
  customerSupportNumbers CustomerSuportNumbers[]
  userId                 String
  user                   User                    @relation(fields: [userId], references: [id])
  createdAt              DateTime                @default(now())
  deletedAt              DateTime?
  updatedAt              DateTime                @updatedAt
}

model CustomerSuportNumbers {
  id         String    @id @default(uuid())
  businessId String
  business   Business  @relation(fields: [businessId], references: [id])
  phone      String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
}

model ApiKey {
  id         String    @id @default(uuid())
  key        String    @unique
  businessId String    @unique
  business   Business  @relation(fields: [businessId], references: [id])
  isActive   Boolean   @default(true)
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
}

model DepartmentClassification {
  id          String       @id @default(uuid())
  name        String       @unique
  code        Int          @unique
  createdAt   DateTime     @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime     @updatedAt
  departments Department[]
}

model Department {
  id                        String                   @id @default(uuid())
  name                      String                   @unique
  code                      Int                      @unique
  departmentClassficationId String
  departmentClassfication   DepartmentClassification @relation(fields: [departmentClassficationId], references: [id])
  business                  Business[]
  createdAt                 DateTime                 @default(now())
  deletedAt                 DateTime?
  updatedAt                 DateTime                 @updatedAt
}

model Customer {
  id         String    @id @default(uuid())
  name       String
  externalId String?
  cpf        String?
  email      String?
  cellPhone  String?
  address    Address?
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime  @updatedAt
  orders     Orders[]
}

model Address {
  id           String    @id @default(uuid())
  customerId   String?   @unique
  customer     Customer? @relation(fields: [customerId], references: [id])
  userId       String?   @unique
  user         User?     @relation(fields: [userId], references: [id])
  cep          String?
  city         String?
  state        String?
  address      String?
  number       String?
  neighborhood String?
  extraInfo    String?
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @updatedAt
}

model Product {
  id                       String                   @id @default(uuid())
  name                     String
  description              String
  currentPrice             Float
  oldPrice                 Float?
  slug                     String
  paymentMethodOnProductId PaymentMethodOnProduct[]
  businessId               String
  business                 Business                 @relation(fields: [businessId], references: [id])
  createdAt                DateTime                 @default(now())
  deletedAt                DateTime?
  updatedAt                DateTime                 @updatedAt
}

model PaymentMethodOnProduct {
  id              String        @id @default(uuid())
  product         Product       @relation(fields: [productId], references: [id])
  productId       String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
}

model Orders {
  id              String        @id @default(uuid())
  businessId      String
  business        Business      @relation(fields: [businessId], references: [id])
  customerId      String
  customer        Customer      @relation(fields: [customerId], references: [id])
  paymentMethodId String
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  orderStatus     OrderStatus
  createdAt       DateTime      @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime      @updatedAt
}

// model Withdraw {
//   id        String         @id @default(uuid())
//   userId    String
//   user      User           @relation(fields: [userId], references: [id])
//   value     Float
//   status    WithdrawStatus
//   createdAt DateTime       @default(now())
//   deletedAt DateTime?
//   updatedAt DateTime       @updatedAt
// }

// enum WithdrawStatus {
//   REFUSED
//   APROVED
//   PENDING
//   PAID
//   ERROR
// }

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  APROVED
  PENDING
  CHARGEBACK
  REFUSEDDUETORISK
  ERROR
}
